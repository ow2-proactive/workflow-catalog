<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="TensorFlow_Demo_Prediction" 
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="CONTAINER_NAME" value="tf" />
    <variable name="PREDICTION_IMAGE" value="2141413229_3f0425f972_n.jpg" />
    <variable name="MODEL_PATH" value="/tmp/output_graph.pb" />
    <variable name="LABEL_PATH" value="/tmp/output_labels.txt" />
    <variable name="PREDICTION_PATH" value="flower_photos/roses/" />
    <variable name="OUTPUT_PATH" value="/out/" />
  </variables>
  <taskFlow>
    <task name="prediction">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Input_Preview"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -o /tmp/output_graph.pb https://raw.githubusercontent.com/sophiesongge/tensorflow_demo/master/output_graph.pb'

#docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -o /tmp/output_labels.txt https://raw.githubusercontent.com/sophiesongge/tensorflow_demo/master/output_labels.txt'

docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -O https://raw.githubusercontent.com/sophiesongge/tensorflow_demo/master/image_prediction.py'


# python image_prediction.py -i flower_photos/roses/2141413229_3f0425f972_n.jpg -o test.jpg
docker exec $variables_CONTAINER_NAME /bin/sh -c "python image_prediction.py -i $variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE -o test.jpg"

rm -r /tmp/output_images

mkdir /tmp/output_images

docker cp $variables_CONTAINER_NAME:/root/darknet/test.jpg /tmp/output_images/$variables_PREDICTION_IMAGE
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="download_data">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
rm -r /tmp/input_images
mkdir /tmp/input_images


docker cp $variables_CONTAINER_NAME:/root/darknet/$variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE /tmp/input_images/$variables_PREDICTION_IMAGE
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Input_Preview">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="download_data"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// def task_id = variables.get("PA_TASK_REPLICATION")
// def image_name = variables.get("image_" + task_id)


//def home = variables.get("home")
def home = "/tmp/input_images"
def input_image = variables.get("PREDICTION_IMAGE")

image_path  = home + "/" + input_image

println "home: " + home 
println "input_image: " + input_image
println "image_path  : " + image_path  

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", input_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Output_Preview">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="prediction"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// def task_id = variables.get("PA_TASK_REPLICATION")
// def image_name = variables.get("image_" + task_id)


//def home = variables.get("home")
def home = "/tmp/output_images"
def output_image = variables.get("PREDICTION_IMAGE")

image_path  = home + "/" + output_image

println "home: " + home 
println "output_image: " + output_image
println "image_path  : " + image_path  

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", output_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>